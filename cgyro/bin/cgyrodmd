#!/usr/bin/env python

import os,sys
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
import argparse
import textwrap
from pydmd import DMD
from cgyro.data import cgyrodata

# Number of roots to test
nmode_max = 16

# Default output file name
outfile = 'out.cgyro.dmd'

# Command line option parser
def opts():

    mytext = '''\
    output:
       This tool will analyze a linear CGYRO run based on the time history
       of selected fields. Subdominant and even stable modes can be computed.
    '''

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        prog = 'cgyrodmd',
        description="CGYRO DMD utility",
        epilog=textwrap.dedent(mytext))

    parser.add_argument('-e',
                        help="working directory (default: cwd)",
                        type=str,
                        default='.')
    parser.add_argument('-tmax',
                        help='Fraction of time samples to retain (default=1.0)',
                        type=float,
                        default=1.0)
    parser.add_argument('-k',
                        help='Time sample spacing (default=1)',
                        type=int,
                        default=-1)
    parser.add_argument('-mmin',
                        help='Minimum number of modes for auto search (default=1)',
                        type=int,
                        default=1)
    parser.add_argument('-obs',
                        help="Comma-separated list of 3 observables",
                        type=str,
                        default='phi,apar,bpar')
    parser.add_argument('-tol',
                        help='Root acceptance tolerance (default=0.005)',
                        type=float,
                        default=0.005)
    parser.add_argument('-eps',
                        help='Averaging sharpness',
                        type=float,
                        default=0.01)
    parser.add_argument('-ext',
                        help='Plotting file format [png,pdf] (default: screen)',
                        type=str,
                        default='screen')
    parser.add_argument('-noplot',
                        help='Switch off plotting',
                        action='store_true')
    parser.add_argument('-noeig',
                        help='Switch off eigenmode plotting',
                        action='store_true')

    args=parser.parse_args()

    return args.e,args.tmax,args.k,args.mmin,args.obs,args.tol,args.eps,args.ext,args.noplot,args.noeig

# DMD utility: Map from (kx,theta) to theta_*
def map1d(f2d,q):
    nr    = f2d.shape[0]
    nt    = f2d.shape[1]
    ntime = f2d.shape[2]
    px = np.arange(nr)-nr//2
    f1d = np.zeros([nr,nt,ntime],dtype=complex)
    anorm = f1d[nr//2,nt//2,:]

    for ir in range(nr):
        f1d[ir,:,:] = f2d[ir,:,:]*np.exp(-2*np.pi*1j*px[ir]*q)
    f1d = f1d.reshape(nr*nt,ntime)

    return f1d,anorm

# DMD utility: downsample with averaging (eps is flatness)
def downsample(f,n,eps=0.01):
    npar = f.shape[0]
    nave = f.shape[1]

    # array end trim
    m = (nave//n)*n

    # downsample

    u = np.linspace(-1,1,n)

    w = 1/(1+eps*u*u)
    w = w/np.sum(w)

    fdown = np.sum(f[:,:m].reshape(npar,-1,n)*w[None,None,:],axis=2)
    return fdown

def rundmd(k):

   # Start by limiting the max number of dmd modes
   nmode = nmode_max

   # step for DMD
   dt = k*(t[1]-t[0])

   # dictionary of eigenvalues
   edict = {}
   # dictionary of eigenmodes
   mdict = {}
   for x in ostr:
      down = downsample(ovec[x],k,eps=eps)
      dmd.fit(down)
      edict[x] = 1j*np.log(dmd.eigs)/dt
      mdict[x] = dmd.modes
      if len(dmd.eigs) < nmode:
         nmode = len(dmd.eigs)

   # vector of sorted eigenvalues
   evec = np.zeros([3,nmode],dtype=complex)
   # vector of sorted eigenmodes
   mvec = np.zeros([3,n_radial*n_theta,nmode],dtype=complex)
   for i,x in enumerate(ostr):
      z  = edict[x]
      zi = z.imag
      k = np.flip(np.argsort(zi))
      evec[i,:] = z[k[:nmode]]
      mvec[i,:,:] = mdict[x][:,k[:nmode]]

   # find true eigenmodes and compute errors
   m01 = []
   m02 = []
   for i in range(nmode):
      for j in range(nmode):
         em = abs(evec[0,i]-evec[1,j])
         en = abs(evec[0,i]-evec[2,j])
         if em < tol:
            # observable 1-i close to observable 2-j
            m01.append([i,j])
         if en < tol:
            # observable 1-i close to observable 3-j
            m02.append([i,j])

   # Get legitimate modes
   # v[0] -> obs1 index
   # v[1] -> obs2 index
   # w[0] -> obs3 index
   jm = []
   for v in m01:
      for w in m02:
         if v[0] == w[0]:
            # 3-way match
            jm.append([v[0],v[1],w[1]])

   # Exit if no modes found
   nm = len(jm)
   if nm < 1:
      print('ERROR: (cgyrodmd) No modes found. Try increasing run length.')
      return 0,[],dt,[],[],[1],[],[]
   else:
      error = np.zeros(nm)
      efreq = np.zeros(nm,dtype=complex)
      emode = np.zeros([3,n_radial*n_theta,nm],dtype=complex)

      # Collect eigenmodes (emode) and eigenfrequencies (efreq)
      for m in range(nm):
         j = np.array(jm[m])
         efreq[m] = np.trace(evec[:,j[:]])/3
         error[m] = np.trace(abs(evec[:,j[:]]-efreq[m]))
         for i in range(3):
            emode[i,:,m] = mvec[i,:,j[i]]

      return nm,jm,dt,efreq,emode,error,edict,evec

#------------------------------------------------------------------------
#
mydir,tmax,k,nmode_min,obs,tol,eps,ext,noplot,noeig = opts()

# process inputs
mydir = mydir+'/'
ostr  = obs.split(',')

fdict = {'phi' :r'$\delta \widetilde{\phi}$',
         'apar':r'$\delta \hskip -1pt \widetilde{A}_\parallel$',
         'bpar':r'$\delta \hskip -1pt \widetilde{B}_\parallel$',
         'ni':r'$\delta n_i$',
         'ne':r'$\delta \widetilde{n}_e$',
         'vi':r'$\delta v_i$',
         've':r'$\delta \widetilde{v}_e$',
         'ei':r'$\delta E_i$',
         'ee':r'$\delta \widetilde{E}_e$'}

# symbols
args = {}
args[ostr[0]] = {'color':'r','marker':'o','facecolors':'none'}
args[ostr[1]] = {'color':'b','marker':'s','facecolors':'none'}
args[ostr[2]] = {'color':'k','marker':'+'}

#---------------------------------------------------------------------------
# COLLECT DATA
sim = cgyrodata(mydir,silent=True)
sim.getbigfield()

if sim.hiprec_flag == 0:
    print('ERROR: (cgyrodmd) Need to run cgyro with HIPREC_FLAG=1')
    sys.exit()

t = sim.t
n_radial  = sim.n_radial
n_theta   = sim.theta_plot
n_species = sim.n_species

# gacode utility for time indices
imax = int(len(t)*tmax)

# collect existing observables
ovec = {}
try:
   y = sim.kxky_phi[0,:,:,0,:imax]+1j*sim.kxky_phi[1,:,:,0,:imax]
   ovec['phi'],a0 = map1d(y,sim.q)
except:
   pass

try:
   y = sim.kxky_apar[0,:,:,0,:imax]+1j*sim.kxky_apar[1,:,:,0,:imax]
   ovec['apar'],a0 = map1d(y,sim.q)
except:
   pass

try:
   y = sim.kxky_bpar[0,:,:,0,:imax]+1j*sim.kxky_bpar[1,:,:,0,:imax]
   ovec['bpar'],a0 = map1d(y,sim.q)
except:
   pass

try:
   y = sim.kxky_n[0,:,:,0,0,:imax]+1j*sim.kxky_n[1,:,:,0,0,:imax]
   ovec['ni'],a0 = map1d(y,sim.q)
except:
   pass

try:
   y = sim.kxky_n[0,:,:,-1,0,:imax]+1j*sim.kxky_n[1,:,:,-1,0,:imax]
   ovec['ne'],a0 = map1d(y,sim.q)
except:
   pass

try:
   y = sim.kxky_v[0,:,:,0,0,:imax]+1j*sim.kxky_v[1,:,:,0,0,:imax]
   ovec['vi'],a0 = map1d(y,sim.q)
except:
   pass

try:
   y = sim.kxky_v[0,:,:,-1,0,:imax]+1j*sim.kxky_v[1,:,:,-1,0,:imax]
   ovec['ve'],a0 = map1d(y,sim.q)
except:
   pass

try:
   y = sim.kxky_e[0,:,:,0,0,:imax]+1j*sim.kxky_e[1,:,:,0,0,:imax]
   ovec['ei'],a0 = map1d(y,sim.q)
except:
   pass

try:
   y = sim.kxky_e[0,:,:,-1,0,:imax]+1j*sim.kxky_e[1,:,:,-1,0,:imax]
   ovec['ee'],a0 = map1d(y,sim.q)
except:
   pass

mykeys = list(ovec.keys())

print('---------------------- CGYRO-DMD ------------------------------')
print('observables selected: '+obs)
print('observables available:',mykeys)
print()

if len(mykeys) < 3:
    print('NOT ENOUGH DATA')
    sys.exit()

#---------------------------------------------------------------------------
# Initialize (classic) DMD object
dmd = DMD(svd_rank=0,exact=True,sorted_eigs='abs')

nm,jm,dt,efreq,emode,error,edict,evec = rundmd(k)

# OUTPUT
str1 = '# cgyrodmd\n'
str2 = '# k = {}\n'.format(k)
str3 = '# tmax = {:.1f} a/cs | w*tmax = {:.2f}\n'.format(t[imax-1],abs(efreq[0])*t[imax-1])
str4 = '# dt   = {:.3f} a/cs | w*dt   = {:.3f}\n'.format(dt,abs(efreq[0])*dt)
str5 = '# gamma     omega     error\n'

f = open(mydir+outfile,'w')
f.write(str1)
f.write(str2)
f.write(str3)
f.write(str4)
f.write(str5)
for m in range(nm):
   data = (efreq[m].imag,efreq[m].real,error[m])
   str1 = '{:+.5f}  {:+.5f}  {:.4e} \n'.format(*data)
   f.write(str1)

f.close()

print()
os.system('cat '+mydir+outfile)

if noplot:
    sys.exit()

#---------------------------------------------------------------------------
# PLOTTING

if 0==1:
    mlabel = [r'$\mathrm{KBM}$',r'$\mathrm{TEM}$',r'$\mathrm{ITG}$']
else:
    mlabel = ['A','B','C','D','E']

yeps = 0.004
ss   = 200

rc('font',size=28)
rc('text',usetex=True)

fig = plt.figure(figsize=(9,7.5))
ax = fig.add_subplot(111)

ax.set_xlabel(r"$(a/c_s)\,\omega$")
ax.set_ylabel(r"$(a/c_s)\,\gamma$")
ax.grid(which="both",ls=":")
ax.grid(which="major",ls=":")

# First plot all modes
for x in ostr:
    ax.scatter(edict[x].real,edict[x].imag,s=ss,**args[x],alpha=0.4)

# Next plot legitimate modes
haslabel = False
for m in range(nm):
    j = np.array(jm[m])
    for i,x in enumerate(ostr):
        x0 = evec[i,j[i]].real ; y0 = evec[i,j[i]].imag
        if haslabel:
            ax.scatter(x0,y0,s=ss,**args[x])
        else:
            ax.scatter(x0,y0,s=ss,**args[x],label=fdict[x])
    haslabel = True
    ax.text(x0,y0+yeps,mlabel[m],verticalalignment='bottom',horizontalalignment='center')

xmax = max(np.real(efreq))+0.09
xmin = min(np.real(efreq))-0.09
ymax = max(np.imag(efreq))+0.07
ymin = min(np.imag(efreq))-0.1
ax.set_xlim([xmin,xmax])
ax.set_ylim([ymin,ymax])
ax.axvline(0,color='k',linestyle=':')
ax.axhline(0,color='k',linestyle=':')
ax.legend(loc=4)

plt.tight_layout(pad=0.3)
if ext == 'screen':
    plt.show()
else:
    plt.savefig(mydir+'out.cgyro.dmd_freq.'+ext)

if noeig:
    sys.exit()

#-------------------------------------------------------------
dtheta = 2*np.pi/n_theta
thetab = np.arange(n_theta*n_radial)*dtheta-(n_radial+1)*np.pi
xt = thetab/np.pi
p0 = n_radial//2*n_theta+n_theta//2

rc('font',size=18)

#-------------------------------------------------------------
# DMD utility: helper function for plotting
def axishelp(ax,x,ylabel):

    x0 = max(xt)
    y0 = 1.02

    ax.set_xlabel(r"$\theta_p/\pi$")
    ax.text(-0.88*x0,0.65*y0,r'\fbox{'+ylabel+'}')

    ax.plot([-x0,x0],[0,0],linestyle=':',alpha=0.2,color='k')
    ax.plot([0,0],[-y0,y0],linestyle=':',alpha=0.2,color='k')
    ax.set_xlim(-x0,x0)
    ax.set_ylim(-y0,y0)

    return ax

if nm < 4:
    ly = 1+2*nm
else:
    ly = 9

fig = plt.figure(figsize=(9,ly))

for m in range(nm):
    for i,x in enumerate(ostr):
        ax = fig.add_subplot(nm,3,i+1+3*m)
        ax = axishelp(ax,xt,fdict[x])

        if m == -1:
            # plot initial-value
            p = np.argmax(abs(ovec[x][:,-1]))
            a00 = ovec[x][p,-1]
            yr = np.real(ovec[x][:,-1]/a00)
            yi = np.imag(ovec[x][:,-1]/a00)
            ax.plot(xt,yr,color='k',linewidth=2,alpha=0.3,linestyle='--')
            ax.plot(xt,yi,color='r',linewidth=2,alpha=0.3,linestyle='--')

        # DMD
        p = np.argmax(abs(emode[i,:,m]))
        a0d = emode[i,p,m]
        yr = np.real(emode[i,:,m]/a0d)
        yi = np.imag(emode[i,:,m]/a0d)
        ax.plot(xt,yr,color='k',linewidth=1)
        ax.plot(xt,yi,color='r',linewidth=1)
        if m+1 < nm:
            ax.set_yticks([])
            ax.set_xticks([])
            ax.set_xlabel('')
            ax.set_ylabel('')
        else:
            ax.set_yticks([])
            ax.set_ylabel('')
            ax.grid(False)

plt.tight_layout(pad=0.05)
if ext == 'screen':
    plt.show()
else:
    plt.savefig(mydir+'out.cgyro.dmd_mode.'+ext)
