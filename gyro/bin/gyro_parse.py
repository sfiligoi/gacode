from gacodeinput import *
import sys

x = SimpleInput()

x.set_extension('.gen')

# GYRO input parameters

x.add('RADIAL_GRID','6')
x.add('ORBIT_GRID','6')
x.add('PASS_GRID','4')
x.add('TRAP_GRID','4')
x.add('ENERGY_GRID','8')
x.add('BLEND_GRID','6')
x.add('BLEND_FIT_ORDER','3')
x.add('THETA_PLOT','1')
x.add('TOROIDAL_MIN','30')
x.add('TOROIDAL_GRID','1')
x.add('TOROIDAL_SEP','10')
x.add('TOROIDAL_REFERENCE','-1')
x.add('SAFETY_FACTOR','2.0')
x.add('SHEAR','1.0')
x.add('DELTA','0.0')
x.add('ZETA','0.0')
x.add('S_DELTA','0.0')
x.add('S_ZETA','0.0')
x.add('KAPPA','1.0')
x.add('S_KAPPA','0.0')
x.add('SHIFT','0.0')
x.add('ASPECT_RATIO','3.0')
x.add('ZMAG','0.0')
x.add('DZMAG','0.0')
x.add('RADIUS','0.5')
x.add('BOX_MULTIPLIER','1.0')
x.add('RHO_STAR','0.0025')
x.add('TIME_STEP','0.2')
x.add('TIME_MAX','15.0')
x.add('TIME_SKIP','5')
x.add('BOUNDARY_METHOD','1')
x.add('RADIAL_DERIVATIVE_BAND','2')
x.add('RADIAL_GYRO_BAND','3')
x.add('EXPLICIT_DAMP_GRID','8')
x.add('EXPLICIT_DAMP','1.0')
x.add('DEBUG_FLAG','0')
x.add('NONLINEAR_FLAG','0')
x.add('AMP_PHI_N','1e-4')
x.add('AMP_PHI_0','0.0')
x.add('RADIAL_UPWIND','1.0')
x.add('ELECTRON_METHOD','1')
x.add('RADIAL_PROFILE_METHOD','1')
x.add('PLOT_U_FLAG','1')
x.add('PLOT_EPAR_FLAG','0')
x.add('PLOT_N_FLAG','0')
x.add('PLOT_E_FLAG','0')
x.add('PLOT_V_FLAG','0')
x.add('Z_EFF','1.0')
x.add('BETAE_UNIT','0.0')
x.add('AMPERE_SCALE','1.0')
x.add('N_FIELD','1')
x.add('SOURCE_METHOD','1')
x.add('NU_SOURCE','0.1')
x.add('VERBOSE_FLAG','0')
x.add('NU_EI','0.0')
x.add('NU_EI_SCALE','1.0')
x.add('NU_II_SCALE','0.0')
x.add('N_SOURCE','1')
x.add('FLAT_PROFILE_FLAG','0')
x.add('DENSITY_METHOD','1')
x.add('INTEGRATOR_METHOD','1')
x.add('ENERGY_MAX','5.0')
x.add('MU','1.0')
x.add('MU_2','1.0')
x.add('MU_3','1.0')
x.add('MU_4','1.0')
x.add('MU_5','1.0')
x.add('MU_ELECTRON','60.0')
x.add('DLNNDR','1.0')
x.add('DLNNDR_2','1.0')
x.add('DLNNDR_3','1.0')
x.add('DLNNDR_4','1.0')
x.add('DLNNDR_5','1.0')
x.add('DLNNDR_ELECTRON','1.0')
x.add('DLNTDR','3.0')
x.add('DLNTDR_2','3.0')
x.add('DLNTDR_3','3.0')
x.add('DLNTDR_4','3.0')
x.add('DLNTDR_5','3.0')
x.add('DLNTDR_ELECTRON','3.0')
x.add('NI_OVER_NE','1.0')
x.add('NI_OVER_NE_2','0.0')
x.add('NI_OVER_NE_3','0.0')
x.add('NI_OVER_NE_4','0.0')
x.add('NI_OVER_NE_5','0.0')
x.add('TI_OVER_TE','1.0')
x.add('TI_OVER_TE_2','1.0')
x.add('TI_OVER_TE_3','1.0')
x.add('TI_OVER_TE_4','1.0')
x.add('TI_OVER_TE_5','1.0')
x.add('EPS_DLNNDR','0.0')
x.add('EPS_DLNNDR_2','0.0')
x.add('EPS_DLNNDR_3','0.0')
x.add('EPS_DLNNDR_4','0.0')
x.add('EPS_DLNNDR_5','0.0')
x.add('EPS_DLNNDR_ELECTRON','0.0')
x.add('EPS_DLNTDR','0.0')
x.add('EPS_DLNTDR_2','0.0')
x.add('EPS_DLNTDR_3','0.0')
x.add('EPS_DLNTDR_4','0.0')
x.add('EPS_DLNTDR_5','0.0')
x.add('EPS_DLNTDR_ELECTRON','0.0')
x.add('Z','1.0')
x.add('Z_2','0.0')
x.add('Z_3','0.0')
x.add('Z_4','0.0')
x.add('Z_5','0.0')
x.add('ORBIT_UPWIND','1.0')
x.add('ORBIT_UPWIND_2','1.0')
x.add('ORBIT_UPWIND_3','1.0')
x.add('ORBIT_UPWIND_4','1.0')
x.add('ORBIT_UPWIND_5','1.0')
x.add('ORBIT_UPWIND_ELECTRON','1.0')
x.add('GAMMA_E','0.0')
x.add('GAMMA_E_SCALE','1.0')
x.add('GAMMA_P','0.0')
x.add('GAMMA_P_SCALE','1.0')
x.add('MACH','0.0')
x.add('MACH_SCALE','1.0')
x.add('LINDIFF_METHOD','1')
x.add('RESTART_NEW_FLAG','1')
x.add('RESTART_DATA_SKIP','10')
x.add('KILL_COLL_FLAG','1')
x.add('NL_METHOD','1')
x.add('KILL_GYRO_B_FLAG','0')
x.add('DIST_PRINT_FLAG','0')
x.add('UDSYMMETRY_FLAG','1')
x.add('GYRO_METHOD','1')
x.add('LAMBDA_DEBYE_SCALE','0.0')
x.add('LAMBDA_DEBYE','0.0')
x.add('THETA_MULT','1')
x.add('SILENT_FLAG','0')
x.add('L_X','64.0')
x.add('L_Y','64.0')
x.add('ENTROPY_FLAG','0')
x.add('EXTRA_PRINT_FLAG','0')
x.add('ORD_RBF','3')
x.add('OUTPUT_FLAG','1')
x.add('IPCCW','-1.0')
x.add('BTCCW','-1.0')
x.add('GEO_GRADBCURV_FLAG','0')
x.add('GEO_FASTIONBETA_FLAG','0')
x.add('GEO_BETAPRIME_SCALE','1.0')
x.add('POISSON_Z_EFF_FLAG','1')
x.add('Z_EFF_METHOD','1')

x.add('GKEIGEN_PROC_MULT','1')
x.add('GKEIGEN_METHOD','1')
x.add('GKEIGEN_MATRIXONLY','0')
x.add('GKEIGEN_MWRITE_FLAG','0')
x.add('GKEIGEN_KSPACE_DIM','300')
x.add('GKEIGEN_N_VALUES','10')
x.add('GKEIGEN_ITER','100')
x.add('GKEIGEN_TOL','0.0000001')
x.add('GKEIGEN_OMEGA_TARGET','-0.3')
x.add('GKEIGEN_GAMMA_TARGET','0.12')
x.add('LINSOLVE_METHOD','1')
x.add('FIELDEIGEN_ROOT_METHOD','1')
x.add('FIELDEIGEN_WR','-0.3')
x.add('FIELDEIGEN_WI','0.2')
x.add('FIELDEIGEN_TOL','1e-6')
x.add('IC_METHOD','1')
x.add('ZF_TEST_FLAG','0')

# Deprecated parameters

x.dep('MACH_METHOD','new parameter is ROTATION_METHOD')
x.dep('KH_METHOD','new parameter is ROTATION_METHOD')
x.dep('DOPPLER_METHOD','new parameter is ROTATION_METHOD')
x.dep('SPECIAL_DIFF_FLAG','')
x.dep('RESTART_SKIP_STEP','new parameter is RESTART_DATA_SKIP')
x.dep('ELECTRON_OVERLAY_METHOD','')
x.dep('AMASSGAS','use MU, where MU=sqrt(m_deuterium/mass_1)')
x.dep('OUTPUT_METHOD','new parameters are PLOT_U_FLAG, PLOT_N_FLAG, etc.')
x.dep('TI_SCALE','more confusing than useful.')
x.dep('TI_SCALE_2','more confusing than useful.')
x.dep('TI_SCALE_3','more confusing than useful.')
x.dep('EM_APERP_FLAG','use N_FIELD.')
x.dep('GEO_BETA_METHOD','use GEO_GRADBCURV_FLAG.')
x.dep('NEO_METHOD','neoclassical diagnostics are handled by NEO.')
x.dep('EMF_FLAG','ancient functionality.')
x.dep('ER_VTOR_FLAG','this functionality now exists outside GYRO.')
x.dep('ALPHA_MHD','use BETAE_UNIT, GEO_BETAPRIME_SCALE, etc.')
x.dep('SIGNB','reimplement using IPCCW, BTCCW.')
x.dep('A_SCALE','reimplement using input.profiles.')
x.dep('B_SCALE','reimplement using input.profiles.')
x.dep('P_SCALE','reimplement using input.profiles.')
x.dep('Q_SCALE','reimplement using input.profiles.')
x.dep('ROTATION_METHOD','use ROTATION_THEORY_METHOD.')
x.dep('COLLISION_METHOD','Deprecated.  You no longer have a choice of method.')
x.dep('FIELD_R0_FLAG','Deprecated.  Functionality removed.')
x.dep('FIELD_R0_GRID','Deprecated.  Functionality removed.')
x.dep('HUGE_RESTART','This option no longer available.')
x.dep('SOURCE_FLAG','Use SOURCE_METHOD: 1=none, 2=old, 3=new')
x.dep('DOPPLER_SCALE','Use GAMMA_E_SCALE')
x.dep('PGAMMA','Use GAMMA_P')
x.dep('PGAMMA_SCALE','Use GAMMA_P_SCALE')

# Perform the parsing
x.read_input('input.gyro')

x.printmsg()

sys.exit(x.error)


